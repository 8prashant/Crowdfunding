import {
  DropErc1155History
} from "./chunk-KMCXL4CE.js";
import {
  PaperCheckout
} from "./chunk-ZCEIFZP5.js";
import {
  StandardErc1155
} from "./chunk-RKNVUYL3.js";
import {
  AbiSchema,
  ContractAppURI,
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractOwner,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractRoyalty,
  ContractWrapper,
  DropErc1155ClaimConditions,
  DropErc1155ContractSchema,
  GasCostEstimator,
  NFT_BASE_CONTRACT_ROLES,
  Transaction,
  buildTransactionFunction,
  getRoleHash,
  require_bs58,
  require_dist,
  require_fast_deep_equal
} from "./chunk-3EH5HBQD.js";
import {
  require_browser_ponyfill
} from "./chunk-6KNAOAGL.js";
import {
  require_utils
} from "./chunk-ENLGICHD.js";
import "./chunk-DDG6VO36.js";
import "./chunk-I4TCAHS5.js";
import {
  init_lib7 as init_lib
} from "./chunk-DURZYMUU.js";
import {
  lib_exports8 as lib_exports
} from "./chunk-7GXO2BXT.js";
import "./chunk-NO757KM3.js";
import {
  require_bn
} from "./chunk-37L3W2XO.js";
import {
  init_shim
} from "./chunk-6SWLQQ3Q.js";
import {
  __publicField,
  __toESM
} from "./chunk-GN3OLCG2.js";

// node_modules/@thirdweb-dev/sdk/dist/edition-drop-24708d00.browser.esm.js
init_shim();
init_lib();
var import_bn = __toESM(require_bn());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var import_merkletreejs = __toESM(require_dist());
var import_bs58 = __toESM(require_bs58());
var import_utils = __toESM(require_utils());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var _EditionDrop = class extends StandardErc1155 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);
    super(contractWrapper, storage, chainId);
    __publicField(this, "createBatch", buildTransactionFunction(async (metadatas, options) => {
      return this.erc1155.lazyMint.prepare(metadatas, options);
    }));
    __publicField(this, "claimTo", buildTransactionFunction((() => {
      var _this = this;
      return async function(destinationAddress, tokenId, quantity) {
        let checkERC20Allowance = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
        return _this.erc1155.claimTo.prepare(destinationAddress, tokenId, quantity, {
          checkERC20Allowance
        });
      };
    })()));
    __publicField(this, "claim", buildTransactionFunction((() => {
      var _this2 = this;
      return async function(tokenId, quantity) {
        let checkERC20Allowance = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
        const address = await _this2.contractWrapper.getSignerAddress();
        return _this2.claimTo.prepare(address, tokenId, quantity, checkERC20Allowance);
      };
    })()));
    __publicField(this, "burnTokens", buildTransactionFunction(async (tokenId, amount) => {
      return this.erc1155.burn.prepare(tokenId, amount);
    }));
    this.abi = AbiSchema.parse(abi);
    this.metadata = new ContractMetadata(this.contractWrapper, DropErc1155ContractSchema, this.storage);
    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, _EditionDrop.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.claimConditions = new DropErc1155ClaimConditions(this.contractWrapper, this.metadata, this.storage);
    this.events = new ContractEvents(this.contractWrapper);
    this.history = new DropErc1155History(this.events);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.checkout = new PaperCheckout(this.contractWrapper);
    this.owner = new ContractOwner(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.address;
  }
  async getAll(queryParams) {
    return this.erc1155.getAll(queryParams);
  }
  async getOwned(walletAddress) {
    return this.erc1155.getOwned(walletAddress);
  }
  async getTotalCount() {
    return this.erc1155.totalCount();
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.read("hasRole", [getRoleHash("transfer"), lib_exports.AddressZero]);
    return !anyoneCanTransfer;
  }
  async getClaimTransaction(destinationAddress, tokenId, quantity) {
    let checkERC20Allowance = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
    return this.erc1155.getClaimTransaction(destinationAddress, tokenId, quantity, {
      checkERC20Allowance
    });
  }
  async prepare(method, args, overrides) {
    return Transaction.fromContractWrapper({
      contractWrapper: this.contractWrapper,
      method,
      args,
      overrides
    });
  }
  async call(functionName, args, overrides) {
    return this.contractWrapper.call(functionName, args, overrides);
  }
};
var EditionDrop = _EditionDrop;
__publicField(EditionDrop, "contractRoles", NFT_BASE_CONTRACT_ROLES);
export {
  EditionDrop
};
//# sourceMappingURL=edition-drop-24708d00.browser.esm-2IRMOG56.js.map
